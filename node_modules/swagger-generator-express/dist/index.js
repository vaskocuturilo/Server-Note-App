"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const swagger_spec_express_1 = require("swagger-spec-express");
// var j2s = require('joi-to-swagger');
const joi_to_swagger_1 = __importDefault(require("joi-to-swagger"));
const swagger_ui_express_1 = require("swagger-ui-express");
const responsesEnum_1 = __importDefault(require("./responsesEnum"));
const lodash_1 = require("lodash");
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const validate_1 = __importDefault(require("./validation/validate"));
/**
 * This will create models for all the provides responses(with joi vlaidations).
 * @param {object} responseModel
 */
function createResponseModel({ responseModel, name }) {
    let isArray = false;
    if (responseModel && Array.isArray(responseModel) && responseModel.length) {
        isArray = true;
        responseModel = responseModel[0];
    }
    for (const property in responseModel) {
        if (typeof responseModel[property] === 'string') {
            responseModel[property] = {
                type: responseModel[property],
            };
        }
    }
    const bodyParameter = {
        type: isArray ? 'array' : 'object',
    };
    if (isArray) {
        bodyParameter.items = {
            type: 'object',
            properties: responseModel,
        };
    }
    else {
        bodyParameter.properties = responseModel;
    }
    const model = Object.assign({
        name,
    }, bodyParameter);
    swagger_spec_express_1.common.addModel(model);
}
/**
 * Serve swagger for apis
 * @param app Express object
 * @param endPoint Swagger path on which swagger UI display
 * @param options Swagget Options.
 * @param path.routePath path to folder in which routes files defined.
 * @param path.requestModelPath path to folder in which requestModel defined.
 * @param path.responseModelPath path to folder in which responseModel defined.
 */
function serveSwagger(app, endPoint, options, path) {
    describeSwagger(path.routePath, path.requestModelPath, path.responseModelPath);
    swagger_spec_express_1.initialise(app, options);
    swagger_spec_express_1.compile(); // compile swagger document
    app.use(endPoint, swagger_ui_express_1.serve, swagger_ui_express_1.setup(swagger_spec_express_1.json()));
}
/**
 * This function will generate json for the success response.
 * @param {object} schema
 * @param {object} describe
 */
function createResponses(schema, responseModel, describe) {
    const responses = {
        500: {
            description: responsesEnum_1.default[500],
        },
    };
    try {
        if (responseModel && !lodash_1.isEmpty(responseModel)) {
            for (const key in responseModel) {
                if (responseModel.hasOwnProperty(key)) {
                    createResponseModel({
                        responseModel: responseModel[key],
                        name: `${schema.model}${key}ResponseModel`,
                    });
                    responses[key] = {
                        description: responsesEnum_1.default[key] ? responsesEnum_1.default[key] : '',
                        schema: {
                            $ref: `#/definitions/${schema.model}${key}ResponseModel`,
                        },
                    };
                }
            }
        }
        describe.responses = responses;
        return describe;
    }
    catch (error) {
        console.log('responseModel', responseModel);
        console.log('Error while generting response model for swagger', error);
        describe.responses = responses;
        return describe;
    }
}
/**
 * This function will generate json given header parameter in schema(with joi validation).
 * @param {object} schema
 * @param {object} describe
 */
function getHeader(schema, describe) {
    const arr = [];
    for (const key in schema) {
        if (schema.hasOwnProperty(key)) {
            arr.push(key);
            const query = schema[key];
            const queryObject = {
                name: key,
                type: query.type ? query.type : query,
                required: query.required === 'undefined' ? false : true,
            };
            if (query._flags && query._flags.presence) {
                queryObject.required = query._flags.presence === 'required' ? true : false;
            }
            swagger_spec_express_1.common.parameters.addHeader(queryObject);
        }
    }
    if (describe.common.parameters) {
        describe.common.parameters.header = arr;
    }
    else {
        describe.common.parameters = {};
        describe.common.parameters.header = arr;
    }
    return describe;
}
/**
 * This function will create models for given path and query schema and
 * convert it to json(with joi validation).
 * @param {object} schema
 * @param {string} value either query and path
 * @param {object} describe
 */
function getQueryAndPathParamObj(schema, value, describe) {
    const arr = [];
    for (const key in schema) {
        if (schema.hasOwnProperty(key)) {
            arr.push(key);
            const query = schema[key];
            const queryObject = {
                name: key,
                type: query.type ? query.type : query,
                required: query.required === 'undefined' ? false : true,
            };
            if (query._flags && query._flags.presence) {
                queryObject.required = query._flags.presence === 'required' ? true : false;
            }
            value === 'query' ? swagger_spec_express_1.common.parameters.addQuery(queryObject) : swagger_spec_express_1.common.parameters.addPath(queryObject);
        }
    }
    if (describe.common.parameters) {
        value === 'query' ? (describe.common.parameters.query = arr) : (describe.common.parameters.path = arr);
    }
    else {
        describe.common.parameters = {};
        value === 'query' ? (describe.common.parameters.query = arr) : (describe.common.parameters.path = arr);
    }
    return describe;
}
/**
 * This function will create models for given body schema
 * and convert it to json(with joi validation).
 * @param {object} schema
 * @param {object} describe
 */
function getBodyParameters(schema, describe) {
    const bodyParameter = joi_to_swagger_1.default(schema.body).swagger;
    const model = Object.assign({
        name: `${schema.model}Model`,
    }, bodyParameter);
    swagger_spec_express_1.common.addModel(model);
    swagger_spec_express_1.common.parameters.addBody({
        name: `${schema.model}Model`,
        required: true,
        description: schema.description || undefined,
        schema: {
            $ref: `#/definitions/${schema.model}Model`,
        },
    });
    describe.common = {
        parameters: {
            body: [`${schema.model}Model`],
        },
    };
    return describe;
}
/**
 * This function will create proper schema based on given body, query, header and path parameter
 * mentioned in the schema.
 * @param {object} schema this is schema mentioned for each API in a route.
 */
function createModel(schema, responseModel) {
    let describe = {
        tags: [schema.group],
        common: {},
    };
    describe = Object.assign({}, createResponses(schema, responseModel, describe));
    if (schema && schema.body) {
        const bodyParams = getBodyParameters(schema, describe);
        describe = Object.assign({}, bodyParams);
    }
    if (schema && schema.query) {
        const queryParams = getQueryAndPathParamObj(schema.query, 'query', describe);
        describe = Object.assign({}, queryParams);
    }
    if (schema && schema.path) {
        const pathParams = getQueryAndPathParamObj(schema.path, 'path', describe);
        describe = Object.assign({}, pathParams);
    }
    if (schema && schema.header) {
        const headerParams = getHeader(schema.header, describe);
        describe = Object.assign({}, headerParams);
    }
    return describe;
}
/**
 *
 * @param routePath : routh folder path.
 * @param requestModelPath : request model path
 * @param responseModelPath : responsemodel model path.
 */
function describeSwagger(routePath, requestModelPath, responseModelPath) {
    try {
        const rootPath = path_1.resolve(__dirname).split('node_modules')[0];
        fs_1.default.readdirSync(path_1.join(rootPath, routePath)).forEach((file) => {
            if (!file) {
                console.log('No router file found in given folder');
                return;
            }
            let responseModel;
            let requestModel;
            const route = path_1.join(rootPath, routePath, file);
            let router = require(route);
            if (!router) {
                console.log('Router missing');
                return;
            }
            router = router.router || router;
            if (responseModelPath) {
                const responseModelFullPath = path_1.join(rootPath, responseModelPath, file);
                if (fs_1.default.existsSync(responseModelFullPath)) {
                    responseModel = require(responseModelFullPath);
                }
                else {
                    console.log('Response model path does not exist responseModelFullPath->', responseModelFullPath);
                }
            }
            if (requestModelPath) {
                const requestModelFullPath = path_1.join(rootPath, requestModelPath, file);
                if (fs_1.default.existsSync(requestModelFullPath)) {
                    requestModel = require(requestModelFullPath);
                }
                else {
                    console.log('Response model path does not exist requestModelFullPath->', requestModelFullPath);
                }
            }
            processRouter(router, requestModel, responseModel, file.split('.')[0]);
        });
    }
    catch (error) {
        console.log(`Error in describeSwagger ${error}`);
        return;
    }
}
function processRouter(item, requestModel, responseModel, routerName) {
    try {
        if (item.stack && item.stack.length > 0) {
            let count = 0;
            // tslint:disable-next-line:no-unused-expression
            lodash_1.map(item.stack, (route) => {
                let routeRequestModel = lodash_1.get(requestModel, [count]);
                const routeResposeModel = lodash_1.get(responseModel, lodash_1.get(routeRequestModel, ['model']));
                if (routeRequestModel && routeRequestModel.excludeFromSwagger) {
                    count++;
                    return;
                }
                if (!routeRequestModel || !lodash_1.has(routeRequestModel, 'group')) {
                    routeRequestModel = {
                        group: routerName,
                        description: routerName,
                    };
                }
                const data = Object.assign({}, createModel(routeRequestModel, routeResposeModel));
                describeRouterRoute(route, data);
                count++;
                return item;
            })[0];
        }
        if (item._router) {
            describeRouterRoute(item._router, requestModel);
            return item;
        }
    }
    catch (error) {
        console.log(`Error in processRouter ${error}`);
        return;
    }
}
function describeRouterRoute(router, metaData) {
    if (metaData.described) {
        console.warn('Route already described');
        return;
    }
    if (!metaData) {
        throw new Error('Metadata must be set when calling describe');
    }
    if (!router) {
        throw new Error(
        // tslint:disable-next-line:max-line-length
        'router was null, either the item that swaggerize & describe was called on is not an express app/router or you have called describe before adding at least one route');
    }
    if (!router.route) {
        throw new Error(
        // tslint:disable-next-line:max-line-length
        'Unable to add swagger metadata to last route since the last item in the stack was not a route. Route name :' +
            router.route.name +
            '. Metadata :' +
            JSON.stringify(metaData));
    }
    const verb = Object.keys(router.route.methods)[0];
    if (!verb) {
        throw new Error(
        // tslint:disable-next-line:max-line-length
        "Unable to add swagger metadata to last route since the last route's methods property was empty" +
            router.route.name +
            '. Metadata :' +
            JSON.stringify(metaData));
    }
    swagger_spec_express_1.ensureValid(metaData);
    ensureAtLeastOneResponse(metaData);
    metaData.path = router.route.path;
    metaData.verb = verb;
    router.route.swaggerData = metaData;
    metaData.described = true;
}
function ensureAtLeastOneResponse(metaData) {
    if (metaData.responses && Object.keys(metaData.responses).length > 0) {
        return;
    }
    if (metaData.common && metaData.common.responses.length > 0) {
        return;
    }
    throw new Error(
    // tslint:disable-next-line:max-line-length
    'Each metadata description for a route must have at least one response, either specified in metaData.responses or metaData.common.responses.');
}
module.exports = {
    swaggerize: swagger_spec_express_1.swaggerize,
    createModel,
    serveSwagger,
    validation: validate_1.default
};
